{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"khcolors documentation","text":""},{"location":"index.html#index","title":"Index","text":"<ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"index.html#overview","title":"Overview","text":"<p><code>khcolors</code> - an application for colour selection and colour names insertion.</p> <p>This package provides utilities for selecting and formatting colors in terminal and data visualization applications, such as matplotlib. It also provides assistance while working with the <code>rich</code> python library.</p> <p>Source files:</p> <pre><code>\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 khcolors\n        \u251c\u2500\u2500 __about__.py\n        \u251c\u2500\u2500 colors_util.py\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 lib.py\n        \u2514\u2500\u2500 __main__.py\n</code></pre> Main modules <ul> <li><code>colors_util</code>: Core functionality for color selection.</li> <li><code>lib</code>: Helper functions for managing color names and palettes.</li> </ul> Most important functions <ul> <li>in <code>colors_util</code>:<ul> <li><code>find_color</code>: getting a list of colours with <code>name</code> in them</li> <li><code>get_color_name</code>: getting the colour name from rich or CSS4 palettes</li> <li><code>print_color</code>: printing the chosen colour</li> </ul> </li> </ul> <p>(see Reference for details)</p> Installation <p><code>pip install khcolors</code></p> <p>(see Installation for details)</p> Example usage <ul> <li>terminal:</li> </ul> <p>(see How-to guides for more examples.)</p> <ul> <li> <p>script/REPL:</p> <p><code>&gt;&gt;&gt; from khcolors.colors_util import ANSI_COLOR_NAMES as palette</code></p> <p><code>&gt;&gt;&gt; from khcolors.colors_util import find_color</code></p> <p><code>&gt;&gt;&gt; shades = find_color(palette, \"red\")</code></p> <p><code>&gt;&gt;&gt; for i, color in enumerate(shades):</code></p> <p><code>...     print(f\"{i}. {color}\")</code></p> <p><code>...</code></p> <p><code>0. red</code></p> <p><code>1. bright_red</code></p> <p><code>2. dark_red</code></p> <p><code>3. red3</code></p> <p><code>4. medium_violet_red</code></p> <p><code>5. indian_red</code></p> <p><code>6. red1</code></p> <p><code>7. orange_red1</code></p> <p><code>8. indian_red1</code></p> <p><code>9. pale_violet_red1</code></p> </li> </ul> Dependencies <ul> <li><code>matplotlib</code></li> <li><code>pyperclip</code></li> <li><code>rich</code></li> </ul> <p>For <code>README</code> file, visit:      https://github.com/heliotech/khcolors</p>"},{"location":"explanation.html","title":"Explanation","text":"<p>During data visualization with <code>matplotlib</code>, in the form of plots of various types, choosing colours is essential. It is obvious that different lines or data series look much better in a single plot when they are represented in  distinct colours. Additionally, styling the plot and axes titles may also benefit from the use of colours. When working on a terminal application, selecting colours is equally important for text formatting.</p> <p>Remembering the names of colours, such as <code>red</code>, <code>blue</code>, <code>green</code> or <code>yellow</code> is straightforward and typing those names is generally not cumbersome. However, even a diligent and meticulous researcher, or programmer can become weary of repeatedly selecting the same colours, and would get a bit tired of picking the same colours all the time, typing them repeatedly and, in the end, and ultimately becoming bored with the same shades.</p> <p>The issue becomes particularly problematic if the author stumbles upon a colour table, containing 148 different shades from the <code>CSS4</code> set, or 235 items in the <code>rich</code> palette. In such a case 1) it becomes evident that there are, literally, tens or even hundreds, of possible choices, and 2) a larger number of colours results in longer names, which means longer strings to remember and type (when the risk of errors also increases).</p> <p>All of the above gave an impulse to create an application<sup>1</sup> designed to assist in selecting colour names and inserting them into code. The author's recent fascination with applications that operate in terminal emulators resulted in the <code>khcolors</code> project.</p>"},{"location":"explanation.html#matplotlib-example","title":"<code>matplotlib</code> example","text":"<p>Possibility of application of the <code>khcolors</code> program while working with <code>matplotlib</code> is illustrated with an example file, plotting 3 curves. Each of the plotted data series had its own colour. To stress the value of a helping utility for choosing colour names, the axes legends and plot labels were assigned with different colours. Such an approach resulted in 6 colour names (lines <code>6-11</code>; when a certain colour value was to be specified, it was done through these variable names, obviously, lines <code>22-24, 27, 28</code> and <code>39</code>).</p> cos_sin_x.py<pre><code># cos_sin_x.py\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use('dark_background')\n\ncolor_cos = \"yellowgreen\"\ncolor_sin = \"orange\"\n\ncolor_label_cos = \"lawngreen\"\ncolor_label_sin = \"orangered\"\n\nx = np.linspace(0, 2*np.pi, 360, endpoint=True)\ncos_x, sin_x = np.cos(x), np.sin(x)\n\nfig, ax_0 = plt.subplots(figsize=(8, 6))\nax_0.set_title(\"cos(x) and sin(x)\", fontsize=16)\n\ncolor_sincos = \"mediumslateblue\"\ncolor_label_cos = \"lawngreen\"\ncolor_label_sin = \"orangered\"\ncolor_label_sincos = \"slateblue\"\n\nnr_pts = 1000\nx = np.linspace(0, 2*np.pi, nr_pts, endpoint=True)\ncos_x, sin_x = np.cos(x), np.sin(x)\nsin_x_cos_x = sin_x*cos_x\n\nfig, ax_0 = plt.subplots(figsize=(8, 6))\nax_0.set_title(\"sin(x), cos(x) and sin(x)*cos(x)\", fontsize=16)\n\nax_1 = ax_0.twinx()\n\nax_0.plot(x, cos_x, lw=3, color=color_label_cos, label='cos(x)')\nax_1.plot(x, sin_x, lw=3, color=color_sin, label='sin(x)')\n\n\nax_0.set_xlabel(\"x\", fontsize=14)\nax_0.set_ylabel(\"cos(x)\", color=color_cos, fontsize=14)\nax_1.set_ylabel(\"sin(x)\", color=color_sin, fontsize=14)\nax_1.set_yticks([])\n\nax_1.plot(x, sin_x_cos_x, lw=3, color=color_sincos, label='sin(x)*cos(x)')\n\nax_0.set_xlabel(\"x\", fontsize=14)\nax_0.set_ylabel(\"sin(x)\", color=color_sin, fontsize=14)\nax_1.set_ylabel(\"cos(x)\", color=color_cos, fontsize=14)\nax_1.set_yticks([])\n\nmax_value = np.max(sin_x_cos_x)\nmax_idx = np.argmax(max_value)\ntolerance = 1e-6\nmax_idc = np.where(np.isclose(sin_x_cos_x, max_value, atol=tolerance))[0]\nx_annot = x[max_idc[1]]\ny_annot = sin_x_cos_x[max_idc[1]]\nax_1.annotate(\n    'sin(x)*cos(x)',\n    color=color_label_sincos,\n    xy=(x_annot, y_annot),\n    xytext=(4.5, 0.9),\n    arrowprops=dict(facecolor='black',\n                    shrink=0.05, width=1.5),\n    fontsize=12\n)\n\nax_0.legend(loc='lower right', fontsize=12)\nax_1.legend(loc='lower left', fontsize=12)\n\nplt.tight_layout()\nplt.savefig(\"cos_sin_x.png\", dpi=120)\nplt.show()\n</code></pre> <p>The script resulted in the following plot:</p> <p>In case of each of the colour variables, the name of the colour can be conveniently chosen simply by typing in the terminal:</p> <pre><code>$ khcolors &lt;colour_name&gt; -c\n</code></pre> <p>and choosing the desired colour shade, e.g.</p> <p>When many colour names are needed, the full <code>rich</code> or <code>CSSR</code> colour spectrum presented with the application might prove useful.</p>"},{"location":"explanation.html#rich-example","title":"<code>rich</code> example","text":"<p>The application of <code>rich</code> colour palette with <code>khcolors</code> is illustrated with a simple example of a script generating 4 different panels. Colours for the contents of each panel were defined in lines <code>11-16</code>. Colours of the border of each panel was chosen of a different shade (lines <code>18-23</code>).</p> 3strings_rich_example.py<pre><code>#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# 3strings_rich_example.py\n\nfrom rich.columns import Columns\nfrom rich.console import Console\nfrom rich.panel import Panel\nfrom rich.text import Text\n\nstyles = {\n    'fstring': 'bold cyan',\n    'raw': 'bold red3',\n    'regular': 'bold  bright_yellow',  # \u2026should be some shade of yellow\u2026\n    'title': 'bold bright_blue',\n}\n\npanel_colors = {\n    'fstring': 'cyan1',\n    'raw': 'red1',\n    'regular': 'light_yellow3',\n    'title': 'deep_sky_blue3',\n}\n\nfstring = Text('f\"{strings}\"', justify='center', style=styles['fstring'])\nraw = Text('r\"raw strings\"', justify='center', style=styles['raw'])\nregular = Text('\"regular string\"', justify='center', style=styles['regular'])\ntitle = Text('3 kinds of string in python', justify='center',\n             style=styles['title'])\n\ncn = Console()\ncn.print(Panel(title, border_style=panel_colors['title']))\npanels = [\n    Panel(regular, border_style=panel_colors['regular']),\n    Panel(fstring, border_style=panel_colors['fstring']),\n    Panel(raw, border_style=panel_colors['raw']),\n]\n\ncn.print(Columns(panels, expand=True))\n</code></pre> <p>The result is presented in the following figure (line <code>39</code>):</p> <ol> <li> <p>While it is indeed possible to remember all the names of colours,</p> <p>such an approach in the end would require more typing (with higher risk of mistakes), and... more typing.\u00a0\u21a9</p> </li> </ol>"},{"location":"how-to-guides.html","title":"How to guides","text":""},{"location":"how-to-guides.html#how-to-print-all-the-colours","title":"How To Print All The Colours?","text":"<p>There are 2 colour palettes available in the <code>khcolors</code>: <code>rich.color.ANSI_COLOR_NAMES</code> and <code>matplotlib.colors.CSS4_COLORS</code>. To print all the colours from a palette, simply type <code>khcolors</code>, without any name. Without any options, the user is asked if all 235 colours from the <code>rich</code> palette should be printed. If <code>-c</code> is provided, the application will ask if all of 148 CSS4 colours should be printed.</p>"},{"location":"how-to-guides.html#how-to-choose-between-rich-and-matplotlib-palettes","title":"How To Choose Between <code>rich</code> and <code>matplotlib</code> Palettes?","text":"<p>As it was briefly mentioned in the Tutorials - Getting started, <code>khcolors</code>currently covers 2 palettes: <code>rich.color.ANSI_COLOR_NAMES</code> and <code>matplotlib.colors.CSS4_COLORS</code>. The default palette is <code>rich</code>; to get the list of different names for a particular colour or shade, e.g. <code>pale</code> or <code>pink</code>, just type</p> <pre><code>khcolors &lt;searchd_color_shade&gt;\n</code></pre> <p>If you want to switch to the <code>matplotlib</code> palette, simply use the  <code>-c</code> | <code>--css</code> option, e.g.</p> <pre><code>khcolors &lt;searchd_color_shade&gt; -c\n</code></pre>"},{"location":"how-to-guides.html#how-to-copy-to-clipboard-an-rgb-tuple","title":"How To Copy to Clipboard an <code>RGB</code> Tuple","text":"<p><code>khcolors</code> by default copies to clipboard the name of the chosen colour  (Tutorials - Getting started). To copy <code>RGB</code> tuple, use option <code>-r</code> | <code>--rgb</code>:</p> <p><code>khcolors &lt;searchd_color_shade&gt; -r</code>, e.g.</p> <p>To combine both flags (i.e. to select <code>CSS</code> palette and copying <code>RGB</code> tuple), for, e.g. golden, it is possible to type</p> <p><code>khcolors golden -cr</code>:</p>"},{"location":"reference.html","title":"Reference","text":""},{"location":"reference.html#project-structure","title":"Project Structure","text":"<p>Folders and source files of the project looked as follows: <pre><code>khcolors\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 khcolors\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __about__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 colors_util.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 lib.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 __main__.py\n\u2514\u2500\u2500 tests\n \u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n \u00a0\u00a0 \u2514\u2500\u2500 test_get_color_name.py\n</code></pre></p>"},{"location":"reference.html#khcolorscolors_util","title":"<code>khcolors.colors_util</code>","text":"<p>Main module for choosing colour name from rich or css library.</p> <p>Functions:</p> <pre><code>debug() -&gt; None\nfind_color(colors_base: list, name: str) -&gt; list\nget_color_choices(name: str = \"\", kind: str = \"rich\",\n                  palette: list = None) -&gt; list\nget_color_name(search_for: str, kind: str = \"rich\", rgb: bool = False,\n               palette: list = None) -&gt; str\nget_palette(palette, kind, rgb=False, dbg=False) -&gt; list\nprint_color(i, name, color_base=\"rich\", marg=3, total_colors=10) -&gt; None\nprint_found(color: str, kind: str = \"rich\", rgb: bool = False) -&gt; None\n</code></pre> <p>Constants:</p> <pre><code>CN: Console\nCOLOR_BASE: dict\nMARKER0: str\nMARKER1: str\nFTITLE: str\n</code></pre> <code>debug()</code> <p>Function for debugging</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def debug():\n    \"\"\" Function for debugging \"\"\"\n\n    cprint(\"_luminosity test\", style=\"orange3 bold\")\n    cprint(f\"{_luminosity((0, 0, 0)) = :.4f}\")\n    cprint(f\"{_luminosity((1, 2, 3)) = :.4f}\")\n    cprint(f\"{_luminosity((4.5, 6.7, 8.9)) = :.4f}\")\n</code></pre> <code>find_color(colors_base, name)</code> <p>Getting a target list of colors including <code>name</code></p> <p>Parameters:</p> Name Type Description Default <code>colors_base</code> <code>list</code> <p>the list of colors to search</p> required <code>name</code> <code>str</code> <p>the color to search</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>the list of colors to choose from</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def find_color(colors_base: list, name: str) -&gt; list:\n    \"\"\" Getting a target list of colors including `name`\n\n        Args:\n            colors_base (list): the list of colors to search\n            name (str): the color to search\n\n        Returns:\n            list: the list of colors to choose from\n    \"\"\"\n\n    found = [color for color in colors_base if name in color]\n    if not found:\n        if name == \"name\":\n            msg = Text.assemble((\"Looking for color name \", \"\"),\n                                (f\"{name}\", \"bold italic\"),\n                                (\" -- \", \"\"),\n                                (\"seriously?\", \"bold italic red\"))\n            cprint(msg)\n            return []\n        if name not in [\"base\", \"base-bright\"]:\n            cprint(Text.assemble((\"No color found for '\", \"\"),\n                                 (f\"{name}\", \"bold\"),\n                                 (\"', exiting.\", \"\")))\n        return []\n\n    return found\n</code></pre> <code>get_color_choices(name='', kind='rich', palette=None)</code> <p>Getting the palette to search</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>the palette to search the color, 'rich' or 'css'</p> <code>'rich'</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>the list of colors to search</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def get_color_choices(name: str = \"\", kind: str = \"rich\",\n                      palette: list = None) -&gt; list:\n    \"\"\" Getting the palette to search\n\n        Args:\n            kind (str): the palette to search the color, 'rich' or 'css'\n\n        Returns:\n            list: the list of colors to search\n    \"\"\"\n\n    palette = palette or COLOR_BASE[kind]\n\n    return [color for color in palette if name in color]\n</code></pre> <code>get_color_name(search_for, kind='rich', rgb=False, palette=None)</code> <p>Getting the colour name from rich or CSS4 palettes</p> <p>Function returning the name of the colour, chosen by the user, from printed list of colours. The list is made from the rich or CSS4 palettes; it includes all the colour names containing the base colour provided (<code>search_for</code>). (Main function of the application.)</p> <p>Parameters:</p> Name Type Description Default <code>search_for</code> <code>str</code> <p>name (or part of the name) of the colour               to look for.</p> required <code>kind</code> <code>str</code> <p>the palette to search the color, 'rich' or 'css'</p> <code>'rich'</code> <code>rgb</code> <code>bool</code> <p>if True, the color rgb triplet is copied         to clipboard</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>str</code> <p>the application prints a list of colours found and allows</p> <code>str</code> <p>copying a chosen name to clipboard.</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def get_color_name(search_for: str, kind: str = \"rich\", rgb: bool = False,\n                   palette: list = None) -&gt; str:\n    \"\"\" Getting the colour name from rich or CSS4 palettes\n\n        Function returning the name of the colour, chosen by the user, from\n        printed list of colours. The list is made from the rich or CSS4\n        palettes; it includes all the colour names containing the base\n        colour provided (`search_for`).\n        (Main function of the application.)\n\n        Args:\n            search_for (str): name (or part of the name) of the colour\n                              to look for.\n            kind (str): the palette to search the color, 'rich' or 'css'\n            rgb (bool): if True, the color rgb triplet is copied\n                        to clipboard\n\n        Returns:\n            None: the application prints a list of colours found and allows\n            copying a chosen name to clipboard.\n    \"\"\"\n\n    if search_for in [\"base\", \"base-bright\"]:\n        get_palette(search_for, kind, rgb=rgb)\n    colors_base = get_color_choices(search_for, kind=kind, palette=palette)\n    total_colors = len(colors_base)\n    if total_colors &gt; 35:\n        ans = input(f\"Display all of {total_colors} colors? [y/N]: \")\n        if ans.lower() != \"y\":\n            cprint(\"Exiting.\", style=\"bold\")\n            return \"\"\n\n    found = find_color(colors_base, search_for)\n    if not found:\n        return \"\"\n    cprint(\" Choose colour (number):\", style=\"bold\")\n    marg = len(str(len(found)))\n    for i, color in enumerate(found):\n        print_color(i, color, color_base=kind, marg=marg,\n                    total_colors=total_colors)\n\n    prompt = (f\"Colour number to copy? (1-{total_colors}, \"\n              \"&lt;Enter&gt; to exit): \")\n    while True:\n        try:\n            nr_to_copy = get_integer(prompt, limits=(1, total_colors))\n            if nr_to_copy is None:\n                return \"\"\n            try:\n                chosen_color = found[nr_to_copy - 1]\n            except TypeError:\n                chosen_color = [found[nr - 1] for nr in nr_to_copy]\n\n            chosen_color = [chosen_color] if isinstance(chosen_color, str) \\\n                else chosen_color\n# get_color_name(search_for: str, kind: str = \"rich\", rgb: bool = False,\n#                    palette: list = None) -&gt; str:\n            if len(chosen_color) &gt; CL_MAX:\n                prompt = f\"Copy all of {len(chosen_color)} colors? [y/N]: \"\n                ans = input(prompt)\n                args = dict(search_for=search_for, kind=kind, rgb=rgb,)\n                actions = {\"n\": lambda: _again(args, \"No colours copied. \"),\n                           \"y\": lambda: None, }\n                actions.get(ans.lower(), lambda: None)()\n\n            if not rgb:\n                pyperclip.copy(\", \".join(chosen_color))\n            else:\n                rgb_tp = \", \".join(str(tp) for tp in _get_rgb(chosen_color))\n                pyperclip.copy(rgb_tp)\n            print_found(chosen_color, kind=kind, rgb=rgb)\n            return chosen_color\n        except ValueError:\n            cprint(\"Wrong number, leave empty to exit.\")\n\n    return \"\"\n</code></pre> <code>get_palette(palette, kind, rgb=False, dbg=False)</code> <p>Getting colors palette</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def get_palette(palette, kind, rgb=False, dbg=False):\n    \"\"\" Getting colors palette \"\"\"\n\n    colors = COLOR_PALETTE[kind][palette]\n    if dbg:\n        return colors\n    return get_color_name(\"\", rgb=rgb, palette=colors)\n</code></pre> <code>print_color(i, name, color_base='rich', marg=3, total_colors=10)</code> <p>Printing a color tile</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>the index of the color</p> required <code>name</code> <code>str</code> <p>the name of the color</p> required <code>color_base</code> <code>str</code> <p>the base color</p> <code>'rich'</code> <code>marg</code> <code>int</code> <p>the margin</p> <code>3</code> <code>total_colors</code> <code>int</code> <p>the total number of colors, for adjusting the line width</p> <code>10</code> <p>Returns:</p> Type Description <code>None</code> <p>None (prints)</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def print_color(i, name, color_base=\"rich\", marg=3, total_colors=10) -&gt; None:\n    \"\"\" Printing a color tile\n\n        Args:\n            i (int): the index of the color\n            name (str): the name of the color\n            color_base (str): the base color\n            marg (int): the margin\n            total_colors (int): the total number of colors, for adjusting\n                the line width\n\n        Returns:\n            None (prints)\n    \"\"\"\n\n    clr = name if color_base == \"rich\" else byte_rgb(name)\n    triplet = _get_rgb(clr)\n    if get_terminal_size().columns &gt; 60:  # 61 -- max name + (r, g, b) length\n        name_triplet_txt = f\"{name} {str(triplet)}\"\n    else:\n        name_triplet_txt = f\"{name}\"\n    fg = get_contrast(clr)\n    tile_len = 7\n    style = f\"{fg} on {clr}\"\n    nr_txt = f\" ({i + 1}) \"\n    nr_txt_len = len(str(total_colors)) + 4\n    fill_len = (get_terminal_size().columns - tile_len*2 - nr_txt_len -\n                len(name_triplet_txt) - 2*marg - 3)\n\n    color_line = Text.assemble((\"\u2591\", style),\n                               (MARKER0*marg, style),\n                               (MARKER1*tile_len, f\"bold #000000 on {clr}\"),\n                               (MARKER1*tile_len, f\"bold #ffffff on {clr}\"),\n                               (MARKER0*marg, style),\n                               (f\"{nr_txt:&gt;{nr_txt_len}}\",\n                                \"#ffffff on #000000\"),\n                               (f\" {name_triplet_txt}\", style),\n                               (f\"{' '*fill_len}\", style),\n                               (\"\u2591\", style))\n    cprint(color_line)\n</code></pre> <code>print_found(colors, kind='rich', rgb=False)</code> <p>Print a found color</p> Source code in <code>src/khcolors/colors_util.py</code> <pre><code>def print_found(colors: str, kind: str = \"rich\", rgb: bool = False) -&gt; None:\n    \"\"\" Print a found color \"\"\"\n\n    if len(colors) &gt; 1:\n        plural = \"s\"\n        nl = Text(\"\\n    \", style=\"\")\n    else:\n        plural = \"\"\n        nl = Text(\"\", style=\"\")\n    msg = Text(f\"Color{plural} \")\n    for i, color in enumerate(colors):\n        if kind == \"css\":\n            color_code = byte_rgb(color)\n        else:\n            color_code = color\n        rgb_tp = _get_rgb(color)\n        bg = get_contrast(color)\n        # extra space, padding for color name, if bg is white:\n        extra_spc = \"\" if bg == \"black\" else \" \"\n        if not rgb:\n            color_name_rgb = f\"{extra_spc}{color} {rgb_tp}{extra_spc}\"\n        else:\n            color_name_rgb = f\"{extra_spc}{rgb_tp} ({color}){extra_spc}\"\n        msg.append(nl)\n        msg.append(color_name_rgb,\n                   style=f\"bold italic {color_code} on {bg}\")\n    msg.append(\" copied to clipboard.\")\n    cprint(msg)\n</code></pre>"},{"location":"reference.html#operation","title":"Operation","text":"<p>The entry point of the application was defined in <code>pyproject.toml</code> as:</p> <pre><code>[project.scripts]\nkhcolors = \"khcolors.__main__:main\"\n</code></pre> <p>After defining <code>argparse.ArgumentParser</code>, adding the arguments and parsing them, the main function of the application was called:</p> <pre><code>get_color_name(search_for: str, kind: str = \"rich\", rgb: bool = False,\n                   palette: list = None) -&gt; str\n</code></pre> <p>Arguments:</p> <ul> <li><code>search_for</code>: the name of the colour to look for, e.g. <code>olive</code>.</li> <li><code>kind</code>: the kind of palette to use, e.g. <code>rich</code> or <code>css</code>.</li> <li><code>rgb</code>: whether to copy the colour name or as an <code>(r, g, b)</code> tuple.</li> <li><code>palette</code>: the palette to use instead of <code>ANSI_COLOR_NAMES</code> or <code>CSS4_COLORS</code>.</li> </ul> <p>Returns:</p> <ul> <li><code>None</code> -- the result of the search is printed via function <code>print_color</code>, in a loop, for each found colour.</li> </ul> <p>Finally <code>get_color_name</code> asks for the number of the chosen colour and copies the result to the clipboard.</p>"},{"location":"tutorials.html","title":"Tutorials","text":""},{"location":"tutorials.html#getting-started","title":"Getting started","text":"<p>The application was designed primarily for use in the terminal. After installation, it is possible to simply type <code>khcolors --help</code> in the terminal.</p> <ul> <li> <p>Basic usage</p> <ul> <li> <p><code>TL;DR</code></p> <ul> <li>Go to the terminal, type <code>khcolors &lt;color&gt; [options]</code>,</li> <li>Choose a colour number from the list presented -- the chosen colour will be copied to the clipboard.</li> </ul> <p> </p> </li> <li> <p>details:</p> <ul> <li>the <code>&lt;color&gt;</code> to look for can be a base name of a colour, e.g. <code>green</code>, <code>cyan</code>, etc., or it can be just a part of the name, e.g. <code>blu</code> or <code>light</code>, <code>dark</code>, <code>spring</code>, <code>deep</code>, <code>sky</code>, etc.</li> </ul> <p> </p> <ul> <li>if <code>&lt;color&gt;</code> is a name of the palette (<code>base</code> or <code>base-bright</code>), whole chosen palette will be printed.</li> </ul> <p> </p> <ul> <li>after being presented with the list of colours, you can simply select the chosen shade with the number from the list.</li> </ul> <p> </p> <ul> <li>if <code>&lt;color&gt;</code> does not exist in the palette, e.g. <code>lightbright</code>, the application exits with a message <code>No color found for 'lightbright', exiting.</code></li> </ul> </li> </ul> <p> - options:</p> <ul> <li><code>-c</code> / <code>-css</code>: prints the list of colours from the <code>CSS4</code> palette (the default palette is <code>rich</code>).</li> <li><code>-r</code> / <code>-rgb</code>: the chosen colour is copied as an <code>(r, g, b)</code> tuple (default is the colour name).</li> </ul> <p> </p> </li> </ul> <p> Installation \u21a9</p> <ol> <li> <p>The package can be install with <code>pip</code>:</p> <ul> <li><code>python -m pip install khcolors</code></li> </ul> <p>or</p> </li> <li> <p>cloned from the github repository:</p> <ul> <li><code>git clone https://github.com/pykhaz/khcolors.git</code> (in the terminal)</li> </ul> <p>or</p> </li> <li> <p>downloaded from the repository archive:</p> <ul> <li> <p>Go to github.com/pykhaz/khcolors and download the archive of repository (menu button \"&lt;&gt; Code\" -&gt; \"Download ZIP\").</p> </li> <li> <p>Unzip the archive: <code>unzip khcolors-main.zip</code></p> </li> </ul> </li> <li> <p>and installed:</p> <ul> <li> <p><code>cd</code> into <code>khcolors</code> (if cloned), or <code>hcolors-main</code> (if downloaded).</p> </li> <li> <p>install the package: <code>python -m pip install .</code></p> </li> </ul> </li> </ol>"}]}